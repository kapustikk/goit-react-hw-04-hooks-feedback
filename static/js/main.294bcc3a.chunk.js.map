{"version":3,"sources":["Statistics/Statistics.module.css","FeedbackOptionsHooks/FeedbackOptions.module.css","Notification/Notification.module.css","Section/Section.js","FeedbackOptionsHooks/FeedbackOptions.js","Notification/Notification.js","Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","title","children","FeedbackOptions","options","onLeaveFeedback","getBtnName","namesOfItems","Object","keys","className","s","list","map","item","onClick","button","Notification","message","text","Statistics","good","neutral","bad","total","positivePercentage","App","useState","setGood","setNeutral","setBad","feedback","countTotalFeedback","values","reduce","Error","name","slice","toUpperCase","toLowerCase","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,2B,kBCAzDD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,OAAS,kC,iBCAhED,EAAOC,QAAU,CAAC,KAAO,6B,qHCCV,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,gCACE,6BAAKD,IACJC,K,oBCHQ,SAASC,EAAT,GAIX,IAHFC,EAGC,EAHDA,QACAC,EAEC,EAFDA,gBACAC,EACC,EADDA,WAEMC,EAAeC,OAAOC,KAAKL,GAEjC,OACE,oBAAIM,UAAWC,IAAEC,KAAjB,SACGL,EAAaM,KAAI,SAAAC,GAAI,OACpB,6BACE,yBAAQC,QAAS,kBAAMV,EAAgBS,IAAOJ,UAAWC,IAAEK,OAA3D,UACGV,EAAWQ,GACX,OAHIA,Q,oBCVF,SAASG,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,mBAAGR,UAAWC,IAAEQ,KAAhB,SAAuBD,I,oBCDjB,SAASE,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,qBAAIf,UAAWC,IAAEC,KAAjB,UACE,oBAAIF,UAAWC,IAAEG,KAAjB,SACE,uCAAUO,OAEZ,oBAAIX,UAAWC,IAAEG,KAAjB,SACE,0CAAaQ,OAEf,oBAAIZ,UAAWC,IAAEG,KAAjB,SACE,sCAASS,OAEX,oBAAIb,UAAWC,IAAEG,KAAjB,SACE,wCAAWU,OAEb,oBAAId,UAAWC,IAAEG,KAAjB,SACE,oDAAuBW,EAAvB,YCnBO,SAASC,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrBN,EADqB,KACfO,EADe,OAEED,mBAAS,GAFX,mBAErBL,EAFqB,KAEZO,EAFY,OAGNF,mBAAS,GAHH,mBAGrBJ,EAHqB,KAGhBO,EAHgB,KAKtBC,EAAW,CAAEV,OAAMC,UAASC,OAsB5BS,EAAqB,WACzB,OAAOxB,OAAOyB,OAAOF,GAAUG,QAAO,SAACV,EAAOV,GAAR,OAAiBU,EAAQV,IAAM,IAOvE,OACE,qCACE,cAACd,EAAD,CAASC,MAAM,2BAAf,SACE,cAACE,EAAD,CACEC,QAAS2B,EACT1B,gBAjCc,SAAAS,GACpB,OAAQA,GACN,IAAK,OACH,OAAOc,EAAQP,EAAO,GAExB,IAAK,UACH,OAAOQ,EAAWP,EAAU,GAE9B,IAAK,MACH,OAAOQ,EAAOP,EAAM,GAEtB,QACE,MAAM,IAAIY,MAAM,qBAsBd7B,WAlBW,SAAA8B,GACjB,MAAM,GAAN,OAAUA,EAAKC,MAAM,EAAG,GAAGC,eAA3B,OAA2CF,EAAKC,MAAM,GAAGE,oBAqBvD,cAACvC,EAAD,CAASC,MAAM,eAAf,SAC4B,IAAzB+B,IACC,cAACf,EAAD,CAAcC,QAAQ,sBAEtB,cAACE,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOQ,IACPP,mBAtBDe,KAAKC,MAAc,IAAPpB,EAAcW,YCtCrC,IAYeU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC3B,EAAD,MAEF4B,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.294bcc3a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3hPGw\",\"item\":\"Statistics_item__15v5H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FeedbackOptions_list__3HS-P\",\"button\":\"FeedbackOptions_button__3AFa3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Notification_text__3VVAB\"};","import PropTypes from 'prop-types';\n\nexport default function Section({ title, children }) {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nexport default function FeedbackOptions({\n  options,\n  onLeaveFeedback,\n  getBtnName,\n}) {\n  const namesOfItems = Object.keys(options);\n\n  return (\n    <ul className={s.list}>\n      {namesOfItems.map(item => (\n        <li key={item}>\n          <button onClick={() => onLeaveFeedback(item)} className={s.button}>\n            {getBtnName(item)}\n            {''}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.objectOf(PropTypes.number).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n  getBtnName: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './Notification.module.css';\n\nexport default function Notification({ message }) {\n  return <p className={s.text}>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './Statistics.module.css';\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <ul className={s.list}>\n      <li className={s.item}>\n        <p>Good: {good}</p>\n      </li>\n      <li className={s.item}>\n        <p>Neutral: {neutral}</p>\n      </li>\n      <li className={s.item}>\n        <p>Bad: {bad}</p>\n      </li>\n      <li className={s.item}>\n        <p>Total: {total}</p>\n      </li>\n      <li className={s.item}>\n        <p>Positive feedback: {positivePercentage}%</p>\n      </li>\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import { useState } from 'react';\nimport Section from './Section/Section';\nimport FeedbackOptions from './FeedbackOptionsHooks/FeedbackOptions';\nimport Notification from './Notification/Notification';\nimport Statistics from './Statistics/Statistics';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const feedback = { good, neutral, bad };\n\n  const setActiveItem = item => {\n    switch (item) {\n      case 'good':\n        return setGood(good + 1);\n\n      case 'neutral':\n        return setNeutral(neutral + 1);\n\n      case 'bad':\n        return setBad(bad + 1);\n\n      default:\n        throw new Error('Something wrong');\n    }\n  };\n\n  const getBtnName = name => {\n    return `${name.slice(0, 1).toUpperCase()}${name.slice(1).toLowerCase()}`;\n  };\n\n  const countTotalFeedback = () => {\n    return Object.values(feedback).reduce((total, item) => total + item, 0);\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good * 100) / countTotalFeedback());\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback :)\">\n        <FeedbackOptions\n          options={feedback}\n          onLeaveFeedback={setActiveItem}\n          getBtnName={getBtnName}\n        />\n      </Section>\n\n      <Section title=\"Statistics: \">\n        {countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\"></Notification>\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        )}\n      </Section>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}